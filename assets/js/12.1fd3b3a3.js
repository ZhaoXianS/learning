(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{425:function(v,_,t){"use strict";t.r(_);var r=t(2),l=Object(r.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"垃圾回收相关算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收相关算法"}},[v._v("#")]),v._v(" 垃圾回收相关算法")]),v._v(" "),_("h2",{attrs:{id:"标记阶段-引用计数算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#标记阶段-引用计数算法"}},[v._v("#")]),v._v(" 标记阶段：引用计数算法")]),v._v(" "),_("h3",{attrs:{id:"标记阶段的目的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#标记阶段的目的"}},[v._v("#")]),v._v(" 标记阶段的目的")]),v._v(" "),_("p",[_("strong",[v._v("垃圾标记阶段：主要是为了判断对象是否存活")])]),v._v(" "),_("ol",[_("li",[v._v("在堆里存放着几乎所有的Java对象实例，在GC执行垃圾回收之前，首先"),_("strong",[v._v("需要区分出内存中哪些是存活对象，哪些是已经死亡的对象。"),_("strong",[v._v("只有被标记为己经死亡的对象，GC才会在执行垃圾回收时，释放掉其所占用的内存空间，因此这个过程我们可以称为")]),v._v("垃圾标记阶段")]),v._v("。")]),v._v(" "),_("li",[v._v("那么在JVM中究竟是如何标记一个死亡对象呢？简单来说，当一个对象已经不再被任何的存活对象继续引用时，就可以宣判为已经死亡。")]),v._v(" "),_("li",[v._v("判断对象存活一般有两种方式："),_("strong",[v._v("引用计数算法")]),v._v("和"),_("strong",[v._v("可达性分析算法")]),v._v("。")])]),v._v(" "),_("h3",{attrs:{id:"引用计数算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#引用计数算法"}},[v._v("#")]),v._v(" 引用计数算法")]),v._v(" "),_("ol",[_("li",[v._v("引用计数算法（Reference Counting）比较简单，对每个对象保存一个整型的引用计数器属性。用于记录对象被引用的情况。")]),v._v(" "),_("li",[v._v("对于一个对象A，只要有任何一个对象引用了A，则A的引用计数器就加1；当引用失效时，引用计数器就减1。只要对象A的引用计数器的值为0，即表示对象A不可能再被使用，可进行回收。")]),v._v(" "),_("li",[v._v("优点：实现简单，垃圾对象便于辨识；判定效率高，回收没有延迟性。")]),v._v(" "),_("li",[v._v("缺点：\n"),_("ol",[_("li",[v._v("它需要单独的字段存储计数器，这样的做法增加了"),_("strong",[v._v("存储空间的开销")]),v._v("。")]),v._v(" "),_("li",[v._v("每次赋值都需要更新计数器，伴随着加法和减法操作，这增加了"),_("strong",[v._v("时间开销")]),v._v("。")]),v._v(" "),_("li",[v._v("引用计数器有一个严重的问题，即"),_("strong",[v._v("无法处理循环引用")]),v._v("的情况。这是一条致命缺陷，导致在Java的垃圾回收器中没有使用这类算法。")])])])]),v._v(" "),_("h3",{attrs:{id:"循环引用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#循环引用"}},[v._v("#")]),v._v(" 循环引用")]),v._v(" "),_("p",[_("img",{attrs:{src:"/image/00043.png",alt:"img"}})]),v._v(" "),_("p",[v._v("当p的指针断开的时候，内部的引用形成一个循环，计数器都还算1，无法被回收，这就是循环引用，从而造成内存泄漏")]),v._v(" "),_("h3",{attrs:{id:"小结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[v._v("#")]),v._v(" 小结")]),v._v(" "),_("ol",[_("li",[v._v("引用计数算法，是很多语言的资源回收选择，例如因人工智能而更加火热的Python，它更是同时支持引用计数和垃圾收集机制。")]),v._v(" "),_("li",[v._v("具体哪种最优是要看场景的，业界有大规模实践中仅保留引用计数机制，以提高吞吐量的尝试。")]),v._v(" "),_("li",[v._v("Java并没有选择引用计数，是因为其存在一个基本的难题，也就是很难处理循环引用关系。")]),v._v(" "),_("li",[v._v("Python如何解决循环引用？\n"),_("ul",[_("li",[v._v("手动解除：很好理解，就是在合适的时机，解除引用关系。")]),v._v(" "),_("li",[v._v("使用弱引用weakref，weakref是Python提供的标准库，旨在解决循环引用。")])])])]),v._v(" "),_("h2",{attrs:{id:"标记阶段-可达性分析算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#标记阶段-可达性分析算法"}},[v._v("#")]),v._v(" 标记阶段：可达性分析算法")]),v._v(" "),_("p",[_("strong",[v._v("可达性分析算法：也可以称为根搜索算法、追踪性垃圾收集")])]),v._v(" "),_("ol",[_("li",[v._v("相对于引用计数算法而言，可达性分析算法不仅同样具备实现简单和执行高效等特点，更重要的是该算法可以有效地"),_("strong",[v._v("解决在引用计数算法中循环引用的问题，防止内存泄漏的发生")]),v._v("。")]),v._v(" "),_("li",[v._v("相较于引用计数算法，这里的可达性分析就是Java、C#选择的。这种类型的垃圾收集通常也叫作"),_("strong",[v._v("追踪性垃圾收集")]),v._v("（Tracing Garbage Collection）")])]),v._v(" "),_("h3",{attrs:{id:"可达性分析实现思路"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#可达性分析实现思路"}},[v._v("#")]),v._v(" 可达性分析实现思路")]),v._v(" "),_("ul",[_("li",[v._v("所谓”GCRoots”根集合就是一组必须活跃的引用")]),v._v(" "),_("li",[v._v("其基本思路如下：")])]),v._v(" "),_("ol",[_("li",[v._v("可达性分析算法是以根对象集合（GCRoots）为起始点，按照从上至下的方式"),_("strong",[v._v("搜索被根对象集合所连接的目标对象是否可达。")])]),v._v(" "),_("li",[v._v("使用可达性分析算法后，内存中的存活对象都会被根对象集合直接或间接连接着，搜索所走过的路径称为"),_("strong",[v._v("引用链")]),v._v("（Reference Chain）")]),v._v(" "),_("li",[v._v("如果目标对象没有任何引用链相连，则是不可达的，就意味着该对象己经死亡，可以标记为垃圾对象。")]),v._v(" "),_("li",[v._v("在可达性分析算法中，只有能够被根对象集合直接或者间接连接的对象才是存活对象。")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/image/00044.png",alt:"img"}})]),v._v(" "),_("h3",{attrs:{id:"gc-roots可以是哪些元素"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#gc-roots可以是哪些元素"}},[v._v("#")]),v._v(" GC Roots可以是哪些元素？")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("虚拟机栈中引用的对象")]),v._v(" "),_("ul",[_("li",[v._v("比如：各个线程被调用的方法中使用到的参数、局部变量等。")])])]),v._v(" "),_("li",[_("p",[v._v("本地方法栈内JNI（通常说的本地方法）引用的对象")])]),v._v(" "),_("li",[_("p",[v._v("方法区中类静态属性引用的对象")]),v._v(" "),_("ul",[_("li",[v._v("比如：Java类的引用类型静态变量")])])]),v._v(" "),_("li",[_("p",[v._v("方法区中常量引用的对象")]),v._v(" "),_("ul",[_("li",[v._v("比如：字符串常量池（StringTable）里的引用")])])]),v._v(" "),_("li",[_("p",[v._v("所有被同步锁synchronized持有的对象")])]),v._v(" "),_("li",[_("p",[v._v("Java虚拟机内部的引用。")]),v._v(" "),_("ul",[_("li",[v._v("基本数据类型对应的Class对象，一些常驻的异常对象（如：NullPointerException、OutofMemoryError），系统类加载器。")])])]),v._v(" "),_("li",[_("p",[v._v("反映java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。")])]),v._v(" "),_("li",[_("p",[v._v("总结一句话就是，除了堆空间的周边，比如：虚拟机栈、本地方法栈、方法区、字符串常量池等地方对堆空间进行引用的，都可以作为GC Roots进行可达性分析")])]),v._v(" "),_("li",[_("p",[v._v("除了这些固定的GC Roots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整GC Roots集合。比如：")]),v._v(" "),_("p",[v._v("分代收集")]),v._v(" "),_("p",[v._v("和局部回收（PartialGC）。")]),v._v(" "),_("ul",[_("li",[v._v("如果只针对Java堆中的某一块区域进行垃圾回收（比如：典型的只针对新生代），必须考虑到内存区域是虚拟机自己的实现细节，更不是孤立封闭的，这个区域的对象完全有可能被其他区域的对象所引用，这时候就需要一并将关联的区域对象也加入GC Roots集合中去考虑，才能保证可达性分析的准确性。")])])])]),v._v(" "),_("p",[_("strong",[v._v("小技巧")])]),v._v(" "),_("p",[v._v("由于Root采用栈方式存放变量和指针，所以如果一个指针，它保存了堆内存里面的对象，但是自己又不存放在堆内存里面，那它就是一个Root。")]),v._v(" "),_("h3",{attrs:{id:"注意"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[v._v("#")]),v._v(" 注意")]),v._v(" "),_("ol",[_("li",[v._v("如果要使用可达性分析算法来判断内存是否可回收，那么分析工作必须在一个能保障一致性的快照中进行。这点不满足的话分析结果的准确性就无法保证。")]),v._v(" "),_("li",[v._v("这点也是导致GC进行时必须“Stop The World”的一个重要原因。即使是号称（几乎）不会发生停顿的CMS收集器中，"),_("strong",[v._v("枚举根节点时也是必须要停顿的")]),v._v("。")])]),v._v(" "),_("h2",{attrs:{id:"清除阶段-标记-清除算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#清除阶段-标记-清除算法"}},[v._v("#")]),v._v(" 清除阶段：标记-清除算法")]),v._v(" "),_("p",[_("strong",[v._v("垃圾清除阶段")])]),v._v(" "),_("ul",[_("li",[v._v("当成功区分出内存中存活对象和死亡对象后，GC接下来的任务就是执行垃圾回收，释放掉无用对象所占用的内存空间，以便有足够的可用内存空间为新对象分配内存。目前在JVM中比较常见的三种垃圾收集算法是")])]),v._v(" "),_("ol",[_("li",[v._v("标记-清除算法（Mark-Sweep）")]),v._v(" "),_("li",[v._v("复制算法（Copying）")]),v._v(" "),_("li",[v._v("标记-压缩算法（Mark-Compact）")])]),v._v(" "),_("p",[_("strong",[v._v("背景")])]),v._v(" "),_("p",[v._v("标记-清除算法（Mark-Sweep）是一种非常基础和常见的垃圾收集算法，该算法被J.McCarthy等人在1960年提出并并应用于Lisp语言。")]),v._v(" "),_("p",[_("strong",[v._v("执行过程")])]),v._v(" "),_("p",[v._v("当堆中的有效内存空间（available memory）被耗尽的时候，就会停止整个程序（也被称为stop the world），然后进行两项工作，第一项则是标记，第二项则是清除")]),v._v(" "),_("ol",[_("li",[v._v("标记：Collector从引用根节点开始遍历，标记所有被引用的对象。一般是在对象的Header中记录为可达对象。\n"),_("ul",[_("li",[v._v("注意：标记的是被引用的对象，也就是可达对象，并非标记的是即将被清除的垃圾对象")])])]),v._v(" "),_("li",[v._v("清除：Collector对堆内存从头到尾进行线性的遍历，如果发现某个对象在其Header中没有标记为可达对象，则将其回收")])]),v._v(" "),_("p",[_("strong",[v._v("标记-清除算法的缺点")])]),v._v(" "),_("ol",[_("li",[v._v("标记清除算法的效率不算高")]),v._v(" "),_("li",[v._v("在进行GC的时候，需要停止整个应用程序，用户体验较差")]),v._v(" "),_("li",[v._v("这种方式清理出来的空闲内存是不连续的，产生内碎片，需要维护一个空闲列表")])]),v._v(" "),_("p",[_("strong",[v._v("注意：何为清除？")])]),v._v(" "),_("p",[v._v("这里所谓的清除并不是真的置空，而是把需要清除的对象地址保存在空闲的地址列表里。下次有新对象需要加载时，判断垃圾的位置空间是否够，如果够，就存放（也就是覆盖原有的地址）。")]),v._v(" "),_("p",[v._v("关于空闲列表是在为对象分配内存的时候提过：")]),v._v(" "),_("ol",[_("li",[v._v("如果内存规整\n"),_("ul",[_("li",[v._v("采用指针碰撞的方式进行内存分配")])])]),v._v(" "),_("li",[v._v("如果内存不规整\n"),_("ul",[_("li",[v._v("虚拟机需要维护一个空闲列表")]),v._v(" "),_("li",[v._v("采用空闲列表分配内存")])])])]),v._v(" "),_("h2",{attrs:{id:"清除阶段-复制算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#清除阶段-复制算法"}},[v._v("#")]),v._v(" 清除阶段：复制算法")]),v._v(" "),_("p",[_("strong",[v._v("背景")])]),v._v(" "),_("ol",[_("li",[v._v("为了解决标记-清除算法在垃圾收集效率方面的缺陷，M.L.Minsky于1963年发表了著名的论文，“使用双存储区的Lisp语言垃圾收集器CA LISP Garbage Collector Algorithm Using Serial Secondary Storage）”。M.L.Minsky在该论文中描述的算法被人们称为复制（Copying）算法，它也被M.L.Minsky本人成功地引入到了Lisp语言的一个实现版本中。")])]),v._v(" "),_("p",[_("strong",[v._v("核心思想")])]),v._v(" "),_("p",[v._v("将活着的内存空间分为两块，每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后清除正在使用的内存块中的所有对象，交换两个内存的角色，最后完成垃圾回收")]),v._v(" "),_("p",[v._v("新生代里面就用到了复制算法，Eden区和S0区存活对象整体复制到S1区")]),v._v(" "),_("p",[_("strong",[v._v("复制算法的优缺点")])]),v._v(" "),_("p",[_("strong",[v._v("优点")])]),v._v(" "),_("ol",[_("li",[v._v("没有标记和清除过程，实现简单，运行高效")]),v._v(" "),_("li",[v._v("复制过去以后保证空间的连续性，不会出现“碎片”问题。")])]),v._v(" "),_("p",[_("strong",[v._v("缺点")])]),v._v(" "),_("ol",[_("li",[v._v("此算法的缺点也是很明显的，就是需要两倍的内存空间。")]),v._v(" "),_("li",[v._v("对于G1这种分拆成为大量region的GC，复制而不是移动，意味着GC需要维护region之间对象引用关系，不管是内存占用或者时间开销也不小")])]),v._v(" "),_("p",[_("strong",[v._v("复制算法的应用场景")])]),v._v(" "),_("ol",[_("li",[v._v("如果系统中的垃圾对象很多，复制算法需要复制的存活对象数量并不会太大，效率较高")]),v._v(" "),_("li",[v._v("老年代大量的对象存活，那么复制的对象将会有很多，效率会很低")]),v._v(" "),_("li",[v._v("在新生代，对常规应用的垃圾回收，一次通常可以回收70% - 99% 的内存空间。回收性价比很高。所以现在的商业虚拟机都是用这种收集算法回收新生代。")])]),v._v(" "),_("h2",{attrs:{id:"清除阶段-标记-压缩算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#清除阶段-标记-压缩算法"}},[v._v("#")]),v._v(" 清除阶段：标记-压缩算法")]),v._v(" "),_("p",[_("strong",[v._v("标记-压缩（或标记-整理、Mark - Compact）算法")])]),v._v(" "),_("p",[_("strong",[v._v("背景")])]),v._v(" "),_("ol",[_("li",[v._v("复制算法的高效性是建立在存活对象少、垃圾对象多的前提下的。这种情况在新生代经常发生，但是在老年代，更常见的情况是大部分对象都是存活对象。如果依然使用复制算法，由于存活对象较多，复制的成本也将很高。因此，"),_("strong",[v._v("基于老年代垃圾回收的特性，需要使用其他的算法。")])]),v._v(" "),_("li",[v._v("标记-清除算法的确可以应用在老年代中，但是该算法不仅执行效率低下，而且在执行完内存回收后还会产生内存碎片，所以JVM的设计者需要在此基础之上进行改进。标记-压缩（Mark-Compact）算法由此诞生。")]),v._v(" "),_("li",[v._v("1970年前后，G.L.Steele、C.J.Chene和D.s.Wise等研究者发布标记-压缩算法。在许多现代的垃圾收集器中，人们都使用了标记-压缩算法或其改进版本。")])]),v._v(" "),_("p",[_("strong",[v._v("执行过程")])]),v._v(" "),_("ol",[_("li",[v._v("第一阶段和标记清除算法一样，从根节点开始标记所有被引用对象")]),v._v(" "),_("li",[v._v("第二阶段将所有的存活对象压缩到内存的一端，按顺序排放。之后，清理边界外所有的空间。")])]),v._v(" "),_("p",[_("strong",[v._v("标记-压缩算法与标记-清除算法的比较")])]),v._v(" "),_("ol",[_("li",[v._v("标记-压缩算法的最终效果等同于标记-清除算法执行完成后，再进行一次内存碎片整理，因此，也可以把它称为标记-清除-压缩（Mark-Sweep-Compact）算法。")]),v._v(" "),_("li",[v._v("二者的本质差异在于标记-清除算法是一种"),_("strong",[v._v("非移动式的回收算法")]),v._v("，标记-压缩是"),_("strong",[v._v("移动式的")]),v._v("。是否移动回收后的存活对象是一项优缺点并存的风险决策。")]),v._v(" "),_("li",[v._v("可以看到，标记的存活对象将会被整理，按照内存地址依次排列，而未被标记的内存会被清理掉。如此一来，当我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可，这比维护一个空闲列表显然少了许多开销。")])]),v._v(" "),_("p",[_("strong",[v._v("标记-压缩算法的优缺点")])]),v._v(" "),_("p",[_("strong",[v._v("优点")])]),v._v(" "),_("ol",[_("li",[v._v("消除了标记-清除算法当中，内存区域分散的缺点，我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可。")]),v._v(" "),_("li",[v._v("消除了复制算法当中，内存减半的高额代价。")])]),v._v(" "),_("p",[_("strong",[v._v("缺点")])]),v._v(" "),_("ol",[_("li",[v._v("从效率上来说，标记-整理算法要低于复制算法。")]),v._v(" "),_("li",[v._v("移动对象的同时，如果对象被其他对象引用，则还需要调整引用的地址（因为HotSpot虚拟机采用的不是句柄池的方式，而是直接指针）")]),v._v(" "),_("li",[v._v("移动过程中，需要全程暂停用户应用程序。即：STW")])]),v._v(" "),_("h2",{attrs:{id:"垃圾回收算法小结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收算法小结"}},[v._v("#")]),v._v(" 垃圾回收算法小结")]),v._v(" "),_("blockquote",[_("p",[_("strong",[v._v("对比三种清除阶段的算法")])])]),v._v(" "),_("ol",[_("li",[v._v("效率上来说，复制算法是当之无愧的老大，但是却浪费了太多内存。")]),v._v(" "),_("li",[v._v("而为了尽量兼顾上面提到的三个指标，标记-整理算法相对来说更平滑一些，但是效率上不尽如人意，它比复制算法多了一个标记的阶段，比标记-清除多了一个整理内存的阶段。")])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th"),v._v(" "),_("th",[v._v("标记清除")]),v._v(" "),_("th",[v._v("标记整理")]),v._v(" "),_("th",[v._v("复制")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[_("strong",[v._v("速率")])]),v._v(" "),_("td",[v._v("中等")]),v._v(" "),_("td",[v._v("最慢")]),v._v(" "),_("td",[v._v("最快")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("空间开销")])]),v._v(" "),_("td",[v._v("少（但会堆积碎片）")]),v._v(" "),_("td",[v._v("少（不堆积碎片）")]),v._v(" "),_("td",[v._v("通常需要活对象的2倍空间（不堆积碎片）")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("移动对象")])]),v._v(" "),_("td",[v._v("否")]),v._v(" "),_("td",[v._v("是")]),v._v(" "),_("td",[v._v("是")])])])]),v._v(" "),_("h2",{attrs:{id:"分代收集算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分代收集算法"}},[v._v("#")]),v._v(" 分代收集算法")]),v._v(" "),_("p",[v._v("Q：难道就没有一种最优的算法吗？")]),v._v(" "),_("p",[v._v("A：无，没有最好的算法，只有最合适的算法")]),v._v(" "),_("p",[_("strong",[v._v("为什么要使用分代收集算法")])]),v._v(" "),_("ol",[_("li",[v._v("前面所有这些算法中，并没有一种算法可以完全替代其他算法，它们都具有自己独特的优势和特点。分代收集算法应运而生。")]),v._v(" "),_("li",[v._v("分代收集算法，是基于这样一个事实：**不同的对象的生命周期是不一样的。因此，不同生命周期的对象可以采取不同的收集方式，以便提高回收效率。**一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点使用不同的回收算法，以提高垃圾回收的效率。")]),v._v(" "),_("li",[v._v("在Java程序运行的过程中，会产生大量的对象，其中有些对象是与业务信息相关:\n"),_("ul",[_("li",[v._v("比如Http请求中的Session对象、线程、Socket连接，这类对象跟业务直接挂钩，因此生命周期比较长。")]),v._v(" "),_("li",[v._v("但是还有一些对象，主要是程序运行过程中生成的临时变量，这些对象生命周期会比较短，比如：String对象，由于其不变类的特性，系统会产生大量的这些对象，有些对象甚至只用一次即可回收。")])])])]),v._v(" "),_("p",[_("strong",[v._v("目前几乎所有的GC都采用分代手机算法执行垃圾回收的")])]),v._v(" "),_("p",[v._v("在HotSpot中，基于分代的概念，GC所使用的内存回收算法必须结合年轻代和老年代各自的特点。")]),v._v(" "),_("ol",[_("li",[v._v("年轻代（Young Gen）\n"),_("ul",[_("li",[v._v("年轻代特点：区域相对老年代较小，对象生命周期短、存活率低，回收频繁。")]),v._v(" "),_("li",[v._v("这种情况复制算法的回收整理，速度是最快的。复制算法的效率只和当前存活对象大小有关，因此很适用于年轻代的回收。而复制算法内存利用率不高的问题，通过hotspot中的两个survivor的设计得到缓解。")])])]),v._v(" "),_("li",[v._v("老年代（Tenured Gen）\n"),_("ul",[_("li",[v._v("老年代特点：区域较大，对象生命周期长、存活率高，回收不及年轻代频繁。")]),v._v(" "),_("li",[v._v("这种情况存在大量存活率高的对象，复制算法明显变得不合适。一般是由标记-清除或者是标记-清除与标记-整理的混合实现。\n"),_("ul",[_("li",[v._v("Mark阶段的开销与存活对象的数量成正比。")]),v._v(" "),_("li",[v._v("Sweep阶段的开销与所管理区域的大小成正相关。")]),v._v(" "),_("li",[v._v("Compact阶段的开销与存活对象的数据成正比。")])])])])]),v._v(" "),_("li",[v._v("以HotSpot中的CMS回收器为例，CMS是基于Mark-Sweep实现的，对于对象的回收效率很高。对于碎片问题，CMS采用基于Mark-Compact算法的Serial Old回收器作为补偿措施：当内存回收不佳（碎片导致的Concurrent Mode Failure时），将采用Serial Old执行Full GC以达到对老年代内存的整理。")]),v._v(" "),_("li",[v._v("分代的思想被现有的虚拟机广泛使用。几乎所有的垃圾回收器都区分新生代和老年代")])]),v._v(" "),_("h2",{attrs:{id:"增量收集算法和分区算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#增量收集算法和分区算法"}},[v._v("#")]),v._v(" 增量收集算法和分区算法")]),v._v(" "),_("h3",{attrs:{id:"增量收集算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#增量收集算法"}},[v._v("#")]),v._v(" 增量收集算法")]),v._v(" "),_("p",[v._v("上述现有的算法，在垃圾回收过程中，应用软件将处于一种Stop the World的状态。在"),_("strong",[v._v("Stop the World")]),v._v("状态下，应用程序所有的线程都会挂起，暂停一切正常的工作，等待垃圾回收的完成。如果垃圾回收时间过长，应用程序会被挂起很久，将严重影响用户体验或者系统的稳定性。为了解决这个问题，即对实时垃圾收集算法的研究直接导致了增量收集（Incremental Collecting）算法的诞生。")]),v._v(" "),_("p",[_("strong",[v._v("增量收集算法基本思想")])]),v._v(" "),_("ol",[_("li",[v._v("如果一次性将所有的垃圾进行处理，需要造成系统长时间的停顿，那么就可以让垃圾收集线程和应用程序线程交替执行。"),_("strong",[v._v("每次，垃圾收集线程只收集一小片区域的内存空间，接着切换到应用程序线程。依次反复，直到垃圾收集完成。")])]),v._v(" "),_("li",[v._v("总的来说，增量收集算法的基础仍是传统的标记-清除和复制算法。增量收集算法通过"),_("strong",[v._v("对线程间冲突的妥善处理，允许垃圾收集线程以分阶段的方式完成标记、清理或复制工作")])])]),v._v(" "),_("p",[_("strong",[v._v("增量收集算法的缺点")])]),v._v(" "),_("p",[v._v("使用这种方式，由于在垃圾回收过程中，间断性地还执行了应用程序代码，所以能减少系统的停顿时间。但是，因为线程切换和上下文转换的消耗，会使得垃圾回收的总体成本上升，"),_("strong",[v._v("造成系统吞吐量的下降")]),v._v("。")]),v._v(" "),_("h3",{attrs:{id:"分区算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分区算法"}},[v._v("#")]),v._v(" 分区算法")]),v._v(" "),_("blockquote",[_("p",[v._v("主要针对G1收集器来说的")])]),v._v(" "),_("ol",[_("li",[v._v("一般来说，在相同条件下，堆空间越大，一次GC时所需要的时间就越长，有关GC产生的停顿也越长。为了更好地控制GC产生的停顿时间，将一块大的内存区域分割成多个小块，根据目标的停顿时间，每次合理地回收若干个小区间，而不是整个堆空间，从而减少一次GC所产生的停顿。")]),v._v(" "),_("li",[v._v("分代算法将按照对象的生命周期长短划分成两个部分，分区算法将整个堆空间划分成连续的不同小区间。每一个小区间都独立使用，独立回收。这种算法的好处是可以控制一次回收多少个小区间。")])])])}),[],!1,null,null,null);_.default=l.exports}}]);