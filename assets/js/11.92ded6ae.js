(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{422:function(v,_,a){"use strict";a.r(_);var e=a(2),t=Object(e.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"gc分类及性能"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#gc分类及性能"}},[v._v("#")]),v._v(" GC分类及性能")]),v._v(" "),_("h3",{attrs:{id:"_7款经典的垃圾收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7款经典的垃圾收集器"}},[v._v("#")]),v._v(" 7款经典的垃圾收集器")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("串行回收器：Serial、Serial old")])]),v._v(" "),_("li",[_("p",[v._v("并行回收器：ParNew、Parallel Scavenge、Parallel old")])]),v._v(" "),_("li",[_("p",[v._v("并发回收器：CMS、G1")]),v._v(" "),_("p",[_("img",{attrs:{src:"/image/00032.png",alt:"00032"}})])])]),v._v(" "),_("h3",{attrs:{id:"评估-gc-的性能指标"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#评估-gc-的性能指标"}},[v._v("#")]),v._v(" 评估 GC 的性能指标")]),v._v(" "),_("p",[_("strong",[v._v("指标")])]),v._v(" "),_("ol",[_("li",[_("p",[v._v("吞吐量：运行用户代码的时间占总运行时间的比例（总运行时间 = 程序的运行时间 + 内存回收的时间）")])]),v._v(" "),_("li",[_("p",[v._v("垃圾收集开销：吞吐量的补数，垃圾收集所用时间与总运行时间的比例。")])]),v._v(" "),_("li",[_("p",[v._v("暂停时间：执行垃圾收集时，程序的工作线程被暂停的时间。")])]),v._v(" "),_("li",[_("p",[v._v("收集频率：相对于应用程序的执行，收集操作发生的频率。")])]),v._v(" "),_("li",[_("p",[v._v("内存占用：Java堆区所占的内存大小。")])]),v._v(" "),_("li",[_("p",[v._v("快速：一个对象从诞生到被回收所经历的时间。")])]),v._v(" "),_("li",[_("p",[v._v("吞吐量、暂停时间、内存占用这三者共同构成一个“不可能三角”。三者总体的表现会随着技术进步而越来越好。一款优秀的收集器通常最多同时满足其中的两项。")])]),v._v(" "),_("li",[_("p",[v._v("这三项里，暂停时间的重要性日益凸显。因为随着硬件发展，内存占用多些越来越能容忍，硬件性能的提升也有助于降低收集器运行时对应用程序的影响，即提高了吞吐量。而内存的扩大，对延迟反而带来负面效果。")])]),v._v(" "),_("li",[_("p",[v._v("简单来说，主要抓住两点：")]),v._v(" "),_("ul",[_("li",[v._v("吞吐量")]),v._v(" "),_("li",[v._v("暂停时间")])])])]),v._v(" "),_("h2",{attrs:{id:"cms-回收器-低延迟"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cms-回收器-低延迟"}},[v._v("#")]),v._v(" CMS 回收器：低延迟")]),v._v(" "),_("h3",{attrs:{id:"cms-回收器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cms-回收器"}},[v._v("#")]),v._v(" CMS 回收器")]),v._v(" "),_("ol",[_("li",[v._v("在JDK1.5时期，Hotspot推出了一款在**强交互应用中（就是和用户打交道的引用）**几乎可认为有划时代意义的垃圾收集器：CMS（Concurrent-Mark-Sweep）收集器，"),_("strong",[v._v("这款收集器是HotSpot虚拟机中第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。")])]),v._v(" "),_("li",[v._v("CMS收集器的关注点是尽可能缩短垃圾收集时用户线程的停顿时间。停顿时间越短（低延迟）就越适合与用户交互的程序，良好的响应速度能提升用户体验。\n"),_("ul",[_("li",[v._v("目前很大一部分的Java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求。")])])]),v._v(" "),_("li",[v._v("CMS的垃圾收集算法采用标记-清除算法，并且也会”Stop-the-World”")]),v._v(" "),_("li",[v._v("不幸的是，CMS作为老年代的收集器，却无法与JDK1.4.0中已经存在的新生代收集器Parallel Scavenge配合工作（因为实现的框架不一样，没办法兼容使用），所以在JDK1.5中使用CMS来收集老年代的时候，新生代只能选择ParNew或者Serial收集器中的一个。")]),v._v(" "),_("li",[v._v("在G1出现之前，CMS使用还是非常广泛的。一直到今天，仍然有很多系统使用CMS GC。")])]),v._v(" "),_("h3",{attrs:{id:"cms-工作原理-过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cms-工作原理-过程"}},[v._v("#")]),v._v(" CMS 工作原理（过程）")]),v._v(" "),_("p",[_("img",{attrs:{src:"/image/00033.png",alt:"img"}})]),v._v(" "),_("p",[v._v("CMS整个过程比之前的收集器要复杂，整个过程分为4个主要阶段，即初始标记阶段、并发标记阶段、重新标记阶段和并发清除阶段。(涉及STW的阶段主要是：初始标记 和 重新标记)")]),v._v(" "),_("ol",[_("li",[v._v("初始标记（Initial-Mark）阶段：在这个阶段中，程序中所有的工作线程都将会因为“Stop-the-World”机制而出现短暂的暂停，"),_("strong",[v._v("这个阶段的主要任务仅仅只是标记出GC Roots能直接关联到的对象")]),v._v("。一旦标记完成之后就会恢复之前被暂停的所有应用线程。由于直接关联对象比较小，所以这里的"),_("strong",[v._v("速度非常快")]),v._v("。")]),v._v(" "),_("li",[v._v("并发标记（Concurrent-Mark）阶段：从GC Roots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是"),_("strong",[v._v("不需要停顿用户线程")]),v._v("，"),_("strong",[v._v("可以与垃圾收集线程一起并发运行")]),v._v("。")]),v._v(" "),_("li",[v._v("重新标记（Remark）阶段：由于在并发标记阶段中，程序的工作线程会和垃圾收集线程同时运行或者交叉运行，**因此为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，**这个阶段的停顿时间通常会比初始标记阶段稍长一些，并且也会导致“Stop-the-World”的发生，但也远比并发标记阶段的时间短。")]),v._v(" "),_("li",[v._v("并发清除（Concurrent-Sweep）阶段：此阶段清理删除掉标记阶段判断的已经死亡的对象，释放内存空间。"),_("strong",[v._v("由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的")])])]),v._v(" "),_("h3",{attrs:{id:"cms分析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cms分析"}},[v._v("#")]),v._v(" CMS分析")]),v._v(" "),_("ol",[_("li",[v._v("尽管CMS收集器采用的是并发回收（非独占式），"),_("strong",[v._v("但是在其初始化标记和再次标记这两个阶段中仍然需要执行“Stop-the-World”机制")]),v._v("暂停程序中的工作线程，不过暂停时间并不会太长，因此可以说明目前所有的垃圾收集器都做不到完全不需要“Stop-the-World”，只是尽可能地缩短暂停时间。")]),v._v(" "),_("li",[_("strong",[v._v("由于最耗费时间的并发标记与并发清除阶段都不需要暂停工作，所以整体的回收是低停顿的")]),v._v("。")]),v._v(" "),_("li",[v._v("另外，由于在垃圾收集阶段用户线程没有中断，所以在CMS回收过程中，还应该确保应用程序用户线程有足够的内存可用。因此，CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，"),_("strong",[v._v("而是当堆内存使用率达到某一阈值时，便开始进行回收")]),v._v("，以确保应用程序在CMS工作过程中依然有足够的空间支持应用程序运行。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次**“Concurrent Mode Failure”** 失败，这时虚拟机将启动后备预案：临时启用Serial old收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。")]),v._v(" "),_("li",[v._v("CMS收集器的垃圾收集算法采用的是"),_("strong",[v._v("标记清除算法")]),v._v("，这意味着每次执行完内存回收后，由于被执行内存回收的无用对象所占用的内存空间极有可能是不连续的一些内存块，"),_("strong",[v._v("不可避免地将会产生一些内存碎片")]),v._v("。那么CMS在为新对象分配内存空间时，将无法使用指针碰撞（Bump the Pointer）技术，而只能够选择空闲列表（Free List）执行内存分配。")])]),v._v(" "),_("p",[_("strong",[v._v("为什么 CMS 不采用标记-压缩算法呢？")])]),v._v(" "),_("p",[v._v("答案其实很简答，因为当并发清除的时候，用Compact整理内存的话，原来的用户线程使用的内存还怎么用呢？要保证用户线程能继续执行，前提的它运行的资源不受影响嘛。Mark Compact更适合“stop the world”这种场景下使用")]),v._v(" "),_("h3",{attrs:{id:"cms-的优点与弊端"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cms-的优点与弊端"}},[v._v("#")]),v._v(" CMS 的优点与弊端")]),v._v(" "),_("p",[_("strong",[v._v("优点")])]),v._v(" "),_("ol",[_("li",[v._v("并发收集")]),v._v(" "),_("li",[v._v("低延迟")])]),v._v(" "),_("p",[_("strong",[v._v("弊端")])]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("会产生内存碎片")]),v._v("，导致并发清除后，用户线程可用的空间不足。在无法分配大对象的情况下，不得不提前触发Full GC。")]),v._v(" "),_("li",[_("strong",[v._v("CMS收集器对CPU资源非常敏感")]),v._v("。在并发阶段，它虽然不会导致用户停顿，但是会因为占用了一部分线程而导致应用程序变慢，总吞吐量会降低。")]),v._v(" "),_("li",[_("strong",[v._v("CMS收集器无法处理浮动垃圾")]),v._v("。可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生。在并发标记阶段由于程序的工作线程和垃圾收集线程是同时运行或者交叉运行的，**那么在并发标记阶段如果产生新的垃圾对象，CMS将无法对这些垃圾对象进行标记，最终会导致这些新产生的垃圾对象没有被及时回收，**从而只能在下一次执行GC时释放这些之前未被回收的内存空间。")])]),v._v(" "),_("h2",{attrs:{id:"g1-回收器-区域化分代式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1-回收器-区域化分代式"}},[v._v("#")]),v._v(" G1 回收器：区域化分代式")]),v._v(" "),_("h3",{attrs:{id:"为什么还需要g1"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么还需要g1"}},[v._v("#")]),v._v(" 为什么还需要G1")]),v._v(" "),_("p",[_("strong",[v._v("既然我们已经有了前面几个强大的 GC ，为什么还要发布 Garbage First（G1）GC？")])]),v._v(" "),_("ol",[_("li",[v._v("原因就在于应用程序所应对的业务越来越庞大、复杂，用户越来越多，没有GC就不能保证应用程序正常进行，而经常造成STW的GC又跟不上实际的需求，所以才会不断地尝试对GC进行优化。")]),v._v(" "),_("li",[v._v("G1（Garbage-First）垃圾回收器是在Java7 update4之后引入的一个新的垃圾回收器，是当今收集器技术发展的最前沿成果之一。")]),v._v(" "),_("li",[v._v("与此同时，"),_("strong",[v._v("为了适应现在不断扩大的内存和不断增加的处理器数量")]),v._v("，进一步降低暂停时间（pause time），同时兼顾良好的吞吐量。")]),v._v(" "),_("li",[v._v("官方给G1设定的目标是在延迟可控的情况下获得尽可能高的吞吐量，所以才担当起“全功能收集器”的重任与期望。")])]),v._v(" "),_("h3",{attrs:{id:"为什么名字叫garbage-first-g1-呢"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么名字叫garbage-first-g1-呢"}},[v._v("#")]),v._v(" 为什么名字叫Garbage First(G1)呢？")]),v._v(" "),_("ol",[_("li",[v._v("因为G1是一个并行回收器，它把堆内存分割为很多不相关的区域（Region）（物理上不连续的）。使用不同的Region来表示Eden、幸存者0区，幸存者1区，老年代等。")]),v._v(" "),_("li",[v._v("G1 GC有计划地避免在整个Java堆中进行全区域的垃圾收集。G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，"),_("strong",[v._v("每次根据允许的收集时间，优先回收价值最大的Region。")])]),v._v(" "),_("li",[v._v("由于这种方式的侧重点在于回收垃圾最大量的区间（Region），所以我们给G1一个名字：垃圾优先（Garbage First）。")]),v._v(" "),_("li",[v._v("G1（Garbage-First）是一款面向服务端应用的垃圾收集器，主要针对配备多核CPU及大容量内存的机器，以极高概率满足GC停顿时间的同时，还兼具高吞吐量的性能特征。")]),v._v(" "),_("li",[v._v("在JDK1.7版本正式启用，移除了Experimental的标识，"),_("strong",[v._v("是JDK9以后的默认垃圾回收器")]),v._v("，取代了CMS回收器以及Parallel+Parallel Old组合。被Oracle官方称为**“全功能的垃圾收集器”**。")]),v._v(" "),_("li",[v._v("与此同时，CMS已经在JDK9中被标记为废弃（deprecated）。"),_("strong",[v._v("G1在JDK8中还不是默认的垃圾回收器")]),v._v("，需要使用-XX:+UseG1GC来启用。")])]),v._v(" "),_("h3",{attrs:{id:"g1-回收器的优势"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1-回收器的优势"}},[v._v("#")]),v._v(" G1 回收器的优势")]),v._v(" "),_("p",[v._v("与其他GC收集器相比，G1使用了全新的分区算法，其特点如下所示：")]),v._v(" "),_("ol",[_("li",[v._v("并行与并发兼备\n"),_("ul",[_("li",[v._v("并行性：G1在回收期间，可以有多个GC线程同时工作，有效利用多核计算能力。此时用户线程STW")]),v._v(" "),_("li",[v._v("并发性：G1拥有与应用程序交替执行的能力，部分工作可以和应用程序同时执行，因此，一般来说，不会在整个回收阶段发生完全阻塞应用程序的情况")])])]),v._v(" "),_("li",[v._v("分代收集\n"),_("ul",[_("li",[v._v("从分代上看，G1依然属于分代型垃圾回收器，它会区分年轻代和老年代，年轻代依然有Eden区和Survivor区。但从堆的结构上看，它不要求整个Eden区、年轻代或者老年代都是连续的，也不再坚持固定大小和固定数量。")]),v._v(" "),_("li",[v._v("将堆空间分为若干个区域（Region），这些区域中包含了逻辑上的年轻代和老年代。")]),v._v(" "),_("li",[v._v("和之前的各类回收器不同，它同时兼顾年轻代和老年代。对比其他回收器，或者工作在年轻代，或者工作在老年代；")])])])]),v._v(" "),_("p",[v._v("G1的分区是这样的一个区域")]),v._v(" "),_("p",[_("img",{attrs:{src:"/image/00034.png",alt:"img"}})]),v._v(" "),_("p",[_("strong",[v._v("空间整合")])]),v._v(" "),_("ol",[_("li",[v._v("CMS：“标记-清除”算法、内存碎片、若干次GC后进行一次碎片整理")]),v._v(" "),_("li",[v._v("G1将内存划分为一个个的region。内存的回收是以region作为基本单位的。"),_("strong",[v._v("Region之间是复制算法，但整体上实际可看作是标记-压缩（Mark-Compact）算法")]),v._v("，两种算法都可以避免内存碎片。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。尤其是当Java堆非常大的时候，G1的优势更加明显。")])]),v._v(" "),_("h3",{attrs:{id:"可预测的停顿时间模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#可预测的停顿时间模型"}},[v._v("#")]),v._v(" 可预测的停顿时间模型")]),v._v(" "),_("p",[_("strong",[v._v("可预测的停顿时间模型（即：软实时soft real-time）")])]),v._v(" "),_("p",[v._v("这是G1相对于CMS的另一大优势，G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。")]),v._v(" "),_("ol",[_("li",[v._v("由于分区的原因，G1可以只选取部分区域进行内存回收，这样缩小了回收的范围，因此对于全局停顿情况的发生也能得到较好的控制。")]),v._v(" "),_("li",[v._v("G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，"),_("strong",[v._v("每次根据允许的收集时间，优先回收价值最大的Region")]),v._v("。保证了G1收集器在有限的时间内可以获取尽可能高的收集效率。")]),v._v(" "),_("li",[v._v("相比于CMS GC，G1未必能做到CMS在最好情况下的延时停顿，但是最差情况要好很多。")])]),v._v(" "),_("h3",{attrs:{id:"g1-回收器的缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1-回收器的缺点"}},[v._v("#")]),v._v(" G1 回收器的缺点")]),v._v(" "),_("ol",[_("li",[v._v("相较于CMS，G1还不具备全方位、压倒性优势。比如在用户程序运行过程中，G1无论是为了垃圾收集产生的内存占用（Footprint）还是程序运行时的额外执行负载（overload）都要比CMS要高。")]),v._v(" "),_("li",[v._v("从经验上来说，在小内存应用上CMS的表现大概率会优于G1，而G1在大内存应用上则发挥其优势。平衡点在6-8GB之间。")])]),v._v(" "),_("h3",{attrs:{id:"g1-参数设置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1-参数设置"}},[v._v("#")]),v._v(" G1 参数设置")]),v._v(" "),_("ul",[_("li",[v._v("-XX:+UseG1GC：手动指定使用G1垃圾收集器执行内存回收任务")]),v._v(" "),_("li",[v._v("-XX:G1HeapRegionSize：设置每个Region的大小。值是2的幂，范围是1MB到32MB之间，目标是根据最小的Java堆大小划分出约2048个区域。默认是堆内存的1/2000。")]),v._v(" "),_("li",[v._v("-XX:MaxGCPauseMillis：设置期望达到的最大GC停顿时间指标，JVM会尽力实现，但不保证达到。默认值是200ms")]),v._v(" "),_("li",[v._v("-XX:+ParallelGCThread：设置STW工作线程数的值。最多设置为8")]),v._v(" "),_("li",[v._v("-XX:ConcGCThreads：设置并发标记的线程数。将n设置为并行垃圾回收线程数（ParallelGcThreads）的1/4左右。")]),v._v(" "),_("li",[v._v("-XX:InitiatingHeapOccupancyPercent：设置触发并发GC周期的Java堆占用率阈值。超过此值，就触发GC。默认值是45。")])]),v._v(" "),_("h3",{attrs:{id:"g1-收集器的常见操作步骤"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1-收集器的常见操作步骤"}},[v._v("#")]),v._v(" G1 收集器的常见操作步骤")]),v._v(" "),_("p",[v._v("G1的设计原则就是简化JVM性能调优，开发人员只需要简单的三步即可完成调优：")]),v._v(" "),_("ol",[_("li",[v._v("第一步：开启G1垃圾收集器")]),v._v(" "),_("li",[v._v("第二步：设置堆的最大内存")]),v._v(" "),_("li",[v._v("第三步：设置最大的停顿时间")])]),v._v(" "),_("p",[v._v("G1中提供了三种垃圾回收模式：YoungGC、Mixed GC和Full GC，在不同的条件下被触发。")]),v._v(" "),_("h3",{attrs:{id:"g1-的适用场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1-的适用场景"}},[v._v("#")]),v._v(" G1 的适用场景")]),v._v(" "),_("ol",[_("li",[v._v("面向服务端应用，针对具有大内存、多处理器的机器。（在普通大小的堆里表现并不惊喜）")]),v._v(" "),_("li",[v._v("最主要的应用是需要低GC延迟，并具有大堆的应用程序提供解决方案；")]),v._v(" "),_("li",[v._v("如：在堆大小约6GB或更大时，可预测的暂停时间可以低于0.5秒；（G1通过每次只清理一部分而不是全部的Region的增量式清理来保证每次GC停顿时间不会过长）。")]),v._v(" "),_("li",[v._v("用来替换掉JDK1.5中的CMS收集器；在下面的情况时，使用G1可能比CMS好：\n"),_("ul",[_("li",[v._v("超过50%的Java堆被活动数据占用；")]),v._v(" "),_("li",[v._v("对象分配频率或年代提升频率变化很大；")]),v._v(" "),_("li",[v._v("GC停顿时间过长（长于0.5至1秒）")])])]),v._v(" "),_("li",[v._v("HotSpot垃圾收集器里，除了G1以外，其他的垃圾收集器均使用内置的JVM线程执行GC的多线程操作，而G1 GC可以采用应用线程承担后台运行的GC工作，即当JVM的GC线程处理速度慢时，系统会调用应用程序线程帮助加速垃圾回收过程。")])]),v._v(" "),_("h3",{attrs:{id:"分区-region"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分区-region"}},[v._v("#")]),v._v(" 分区 Region")]),v._v(" "),_("p",[_("strong",[v._v("分区 Region：化整为零")])]),v._v(" "),_("ol",[_("li",[v._v("使用G1收集器时，它将整个Java堆划分成约2048个大小相同的独立Region块，每个Region块大小根据堆空间的实际大小而定，整体被控制在1MB到32MB之间，且为2的N次幂，即1MB，2MB，4MB，8MB，16MB，32MB。可以通过")]),v._v(" "),_("li",[v._v("XX:G1HeapRegionSize设定。"),_("strong",[v._v("所有的Region大小相同，且在JVM生命周期内不会被改变。")])]),v._v(" "),_("li",[v._v("虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。通过Region的动态分配方式实现逻辑上的连续。")]),v._v(" "),_("li",[v._v("一个Region有可能属于Eden，Survivor或者Old/Tenured内存区域。但是一个Region只可能属于一个角色。图中的E表示该Region属于Eden内存区域，S表示属于Survivor内存区域，O表示属于Old内存区域。图中空白的表示未使用的内存空间。")]),v._v(" "),_("li",[v._v("G1垃圾收集器还增加了一种新的内存区域，叫做Humongous内存区域，如图中的H块。主要用于存储大对象，如果超过0.5个Region，就放到H。")])]),v._v(" "),_("p",[_("strong",[v._v("设置 H 的原因")])]),v._v(" "),_("p",[v._v("对于堆中的大对象，默认直接会被分配到老年代，但是如果"),_("strong",[v._v("它是一个短期存在的大对象")]),v._v("就会对垃圾收集器造成负面影响。为了解决这个问题，G1划分了一个Humongous区，它用来专门存放大对象。如"),_("strong",[v._v("果一个H区装不下一个大对象，那么G1会寻找连续的H区来存储")]),v._v("。为了能找到连续的H区，有时候不得不启动Full GC。G1的大多数行为都把H区作为老年代的一部分来看待。")]),v._v(" "),_("p",[_("strong",[v._v("Regio的细节")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/image/00035.png",alt:"img"}})]),v._v(" "),_("ol",[_("li",[v._v("每个Region都是通过指针碰撞来分配空间")]),v._v(" "),_("li",[v._v("G1为每一个Region设 计了两个名为TAMS（Top at Mark Start）的指针，把Region中的一部分空间划分出来用于并发回收过程中的新对象分配，并发回收时新分配的对象地址都必须要在这两个指针位置以上。")]),v._v(" "),_("li",[v._v("TLAB还是用来保证并发性")])]),v._v(" "),_("h3",{attrs:{id:"g1-垃圾回收流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1-垃圾回收流程"}},[v._v("#")]),v._v(" G1 垃圾回收流程")]),v._v(" "),_("p",[v._v("G1 GC的垃圾回收过程主要包括如下三个环节：")]),v._v(" "),_("ul",[_("li",[v._v("年轻代GC（Young GC）")]),v._v(" "),_("li",[v._v("老年代并发标记过程（Concurrent Marking）")]),v._v(" "),_("li",[v._v("混合回收（Mixed GC）")]),v._v(" "),_("li",[v._v("（如果需要，单线程、独占式、高强度的Full GC还是继续存在的。它针对GC的评估失败提供了一种失败保护机制，即强力回收。）")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/image/00036.png",alt:"img"}})]),v._v(" "),_("p",[v._v("顺时针，Young GC –> Young GC+Concurrent Marking –> Mixed GC顺序，进行垃圾回收")]),v._v(" "),_("p",[_("strong",[v._v("回收流程")])]),v._v(" "),_("ol",[_("li",[v._v("应用程序分配内存，当年轻代的Eden区用尽时开始年轻代回收过程；G1的年轻代收集阶段是一个并行的独占式收集器。在年轻代回收期，G1 GC暂停所有应用程序线程，启动多线程执行年轻代回收。然后从年轻代区间移动存活对象到Survivor区间或者老年区间，也有可能是两个区间都会涉及。")]),v._v(" "),_("li",[v._v("当堆内存使用达到一定值（默认45%）时，开始老年代并发标记过程。")]),v._v(" "),_("li",[v._v("标记完成马上开始混合回收过程。对于一个混合回收期，G1 GC从老年区间移动存活对象到空闲区间，这些空闲区间也就成为了老年代的一部分。和年轻代不同，老年代的G1回收器和其他GC不同，"),_("strong",[v._v("G1的老年代回收器不需要整个老年代被回收，一次只需要扫描/回收一小部分老年代的Region就可以了")]),v._v("。同时，这个老年代Region是和年轻代一起被回收的。")]),v._v(" "),_("li",[v._v("举个例子：一个Web服务器，Java进程最大堆内存为4G，每分钟响应1500个请求，每45秒钟会新分配大约2G的内存。G1会每45秒钟进行一次年轻代回收，每31个小时整个堆的使用率会达到45%，会开始老年代并发标记过程，标记完成后开始四到五次的混合回收。")])]),v._v(" "),_("h3",{attrs:{id:"remembered-set-记忆集"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#remembered-set-记忆集"}},[v._v("#")]),v._v(" Remembered Set（记忆集）")]),v._v(" "),_("blockquote",[_("p",[v._v("之前讲过")])]),v._v(" "),_("ol",[_("li",[v._v("一个对象被不同区域引用的问题")]),v._v(" "),_("li",[v._v("一个Region不可能是孤立的，一个Region中的对象可能被其他任意Region中对象引用，判断对象存活时，是否需要扫描整个Java堆才能保证准确？")]),v._v(" "),_("li",[v._v("在其他的分代收集器，也存在这样的问题（而G1更突出，因为G1主要针对大堆）")]),v._v(" "),_("li",[v._v("回收新生代也不得不同时扫描老年代？这样的话会降低Minor GC的效率")])]),v._v(" "),_("p",[_("strong",[v._v("解决方法：")])]),v._v(" "),_("ol",[_("li",[v._v("无论G1还是其他分代收集器，JVM都是使用Remembered Set来避免全堆扫描；")]),v._v(" "),_("li",[v._v("每个Region都有一个对应的Remembered Set")]),v._v(" "),_("li",[v._v("每次Reference类型数据写操作时，都会产生一个Write Barrier暂时中断操作；")]),v._v(" "),_("li",[v._v("然后检查将要写入的引用指向的对象是否和该Reference类型数据在不同的Region（其他收集器：检查老年代对象是否引用了新生代对象）；")]),v._v(" "),_("li",[v._v("如果不同，通过CardTable把相关引用信息记录到引用指向对象的所在Region对应的Remembered Set中；")]),v._v(" "),_("li",[v._v("当进行垃圾收集时，在GC根节点的枚举范围加入Remembered Set；就可以保证不进行全局扫描，也不会有遗漏。")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/image/00037.png",alt:"img"}})]),v._v(" "),_("ol",[_("li",[v._v("在回收 Region 时，为了不进行全堆的扫描，引入了 Remembered Set")]),v._v(" "),_("li",[v._v("Remembered Set 记录了当前 Region 中的对象被哪个对象引用了")]),v._v(" "),_("li",[v._v("这样在进行 Region 复制时，就不要扫描整个堆，只需要去 Remembered Set 里面找到引用了当前 Region 的对象")]),v._v(" "),_("li",[v._v("Region 复制完毕后，修改 Remembered Set 中对象的引用即可")])]),v._v(" "),_("h3",{attrs:{id:"g1回收过程一-年轻代-gc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1回收过程一-年轻代-gc"}},[v._v("#")]),v._v(" G1回收过程一：年轻代 GC")]),v._v(" "),_("ol",[_("li",[v._v("JVM启动时，G1先准备好Eden区，程序在运行过程中不断创建对象到Eden区，当Eden空间耗尽时，G1会启动一次年轻代垃圾回收过程。")]),v._v(" "),_("li",[v._v("年轻代回收只回收Eden区和Survivor区")]),v._v(" "),_("li",[v._v("YGC时，首先G1停止应用程序的执行（Stop-The-World），G1创建回收集（Collection Set），回收集是指需要被回收的内存分段的集合，年轻代回收过程的回收集包含年轻代Eden区和Survivor区所有的内存分段。")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/image/00038.png",alt:"img"}})]),v._v(" "),_("p",[v._v("图的大致意思就是：")]),v._v(" "),_("p",[v._v("1、回收完E和S区，剩余存活的对象会复制到新的S区")]),v._v(" "),_("p",[v._v("2、S区达到一定的阈值可以晋升为O区")]),v._v(" "),_("p",[_("strong",[v._v("细致过程：")])]),v._v(" "),_("p",[_("strong",[v._v("然后开始如下回收过程：")])]),v._v(" "),_("ol",[_("li",[_("p",[v._v("第一阶段，扫描根")]),v._v(" "),_("p",[v._v("根是指GC Roots，根引用连同RSet记录的外部引用作为扫描存活对象的入口。")])]),v._v(" "),_("li",[_("p",[v._v("第二阶段，更新RSet")])]),v._v(" "),_("li",[_("p",[v._v("第三阶段，处理RSet")]),v._v(" "),_("p",[v._v("识别被老年代对象指向的Eden中的对象，这些被指向的Eden中的对象被认为是存活的对象。")])]),v._v(" "),_("li",[_("p",[v._v("第四阶段，复制对象。")]),v._v(" "),_("ul",[_("li",[v._v("此阶段，对象树被遍历，Eden区内存段中存活的对象会被复制到Survivor区中空的内存分段，Survivor区内存段中存活的对象")]),v._v(" "),_("li",[v._v("如果年龄未达阈值，年龄会加1，达到阀值会被会被复制到Old区中空的内存分段。")]),v._v(" "),_("li",[v._v("如果Survivor空间不够，Eden空间的部分数据会直接晋升到老年代空间。")])])]),v._v(" "),_("li",[_("p",[v._v("第五阶段，处理引用")]),v._v(" "),_("p",[v._v("处理Soft，Weak，Phantom，Final，JNI Weak 等引用。最终Eden空间的数据为空，GC停止工作，而目标内存中的对象都是连续存储的，没有碎片，所以复制过程可以达到内存整理的效果，减少碎片。")])])]),v._v(" "),_("p",[_("strong",[v._v("备注：")])]),v._v(" "),_("ol",[_("li",[v._v("对于应用程序的引用赋值语句 oldObject.field（这个是老年代）=object（这个是新生代），JVM会在之前和之后执行特殊的操作以在dirty card queue中入队一个保存了对象引用信息的card。在年轻代回收的时候，G1会对Dirty Card Queue中所有的card进行处理，以更新RSet，保证RSet实时准确的反映引用关系。")]),v._v(" "),_("li",[v._v("那为什么不在引用赋值语句处直接更新RSet呢？这是为了性能的需要，RSet的处理需要线程同步，开销会很大，使用队列性能会好很多。")])]),v._v(" "),_("h3",{attrs:{id:"g1回收过程二-并发标记过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1回收过程二-并发标记过程"}},[v._v("#")]),v._v(" G1回收过程二：并发标记过程")]),v._v(" "),_("ol",[_("li",[v._v("初始标记阶段：标记从根节点直接可达的对象。这个阶段是STW的，并且会触发一次年轻代GC。正是由于该阶段时STW的，所以我们只扫描根节点可达的对象，以节省时间。")]),v._v(" "),_("li",[v._v("根区域扫描（Root Region Scanning）：G1 GC扫描Survivor区直接可达的老年代区域对象，并标记被引用的对象。这一过程必须在Young GC之前完成，因为Young GC会使用复制算法对Survivor区进行GC。")]),v._v(" "),_("li",[v._v("并发标记（Concurrent Marking）：\n"),_("ol",[_("li",[v._v("在整个堆中进行并发标记（和应用程序并发执行），此过程可能被Young GC中断。")]),v._v(" "),_("li",[_("strong",[v._v("在并发标记阶段，若发现区域对象中的所有对象都是垃圾，那这个区域会被立即回收。")])]),v._v(" "),_("li",[v._v("同时，并发标记过程中，会计算每个区域的对象活性（区域中存活对象的比例）。")])])]),v._v(" "),_("li",[v._v("再次标记（Remark）：由于应用程序持续进行，需要修正上一次的标记结果。是STW的。G1中采用了比CMS更快的原始快照算法：Snapshot-At-The-Beginning（SATB）。")]),v._v(" "),_("li",[v._v("独占清理（cleanup，STW）：计算各个区域的存活对象和GC回收比例，并进行排序，识别可以混合回收的区域。为下阶段做铺垫。是STW的。这个阶段并不会实际上去做垃圾的收集")]),v._v(" "),_("li",[v._v("并发清理阶段：识别并清理完全空闲的区域。")])]),v._v(" "),_("h3",{attrs:{id:"g1回收过程三-混合回收过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1回收过程三-混合回收过程"}},[v._v("#")]),v._v(" G1回收过程三：混合回收过程")]),v._v(" "),_("p",[v._v("当越来越多的对象晋升到老年代Old Region时，为了避免堆内存被耗尽，虚拟机会触发一个混合的垃圾收集器，即Mixed GC，该算法并不是一个Old GC，除了回收整个Young Region，还会回收一部分的Old Region。这里需要注意：是一部分老年代，而不是全部老年代。可以选择哪些Old Region进行收集，从而可以对垃圾回收的耗时时间进行控制。也要注意的是Mixed GC并不是Full GC。")]),v._v(" "),_("p",[_("img",{attrs:{src:"/image/00039.png",alt:"img"}})]),v._v(" "),_("p",[_("strong",[v._v("混合回收的细节")])]),v._v(" "),_("ol",[_("li",[v._v("并发标记结束以后，老年代中百分百为垃圾的内存分段被回收了，部分为垃圾的内存分段被计算了出来。默认情况下，这些老年代的内存分段会分8次（可以通过-XX:G1MixedGCCountTarget设置）被回收。【意思就是一个Region会被分为8个内存段】")]),v._v(" "),_("li",[v._v("混合回收的回收集（Collection Set）包括八分之一的老年代内存分段，Eden区内存分段，Survivor区内存分段。混合回收的算法和年轻代回收的算法完全一样，只是回收集多了老年代的内存分段。具体过程请参考上面的年轻代回收过程。")]),v._v(" "),_("li",[v._v("由于老年代中的内存分段默认分8次回收，G1会优先回收垃圾多的内存分段。垃圾占内存分段比例越高的，越会被先回收。并且有一个阈值会决定内存分段是否被回收。XX:G1MixedGCLiveThresholdPercent，默认为65%，意思是垃圾占内存分段比例要达到65%才会被回收。如果垃圾占比太低，意味着存活的对象占比高，在复制的时候会花费更多的时间。")]),v._v(" "),_("li",[v._v("混合回收并不一定要进行8次。有一个阈值-XX:G1HeapWastePercent，默认值为10%，意思是允许整个堆内存中有10%的空间被浪费，意味着如果发现可以回收的垃圾占堆内存的比例低于10%，则不再进行混合回收。因为GC会花费很多的时间但是回收到的内存却很少。")])]),v._v(" "),_("h3",{attrs:{id:"g1-回收可选的过程四-full-gc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1-回收可选的过程四-full-gc"}},[v._v("#")]),v._v(" G1 回收可选的过程四：Full GC")]),v._v(" "),_("ol",[_("li",[v._v("G1的初衷就是要避免Full GC的出现。但是如果上述方式不能正常工作，G1会停止应用程序的执行（Stop-The-World），使用"),_("strong",[v._v("单线程")]),v._v("的内存回收算法进行垃圾回收，性能会非常差，应用程序停顿时间会很长。")]),v._v(" "),_("li",[v._v("要避免Full GC的发生，一旦发生Full GC，需要对JVM参数进行调整。什么时候会发生Ful1GC呢？比如堆内存太小，当G1在复制存活对象的时候没有空的内存分段可用，则会回退到Full GC，这种情况可以通过增大内存解决。")])]),v._v(" "),_("p",[v._v("导致G1 Full GC的原因可能有两个：")]),v._v(" "),_("ol",[_("li",[v._v("EVacuation的时候没有足够的to-space来存放晋升的对象；")]),v._v(" "),_("li",[v._v("并发处理过程完成之前空间耗尽。")])]),v._v(" "),_("h3",{attrs:{id:"g1补充"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1补充"}},[v._v("#")]),v._v(" G1补充")]),v._v(" "),_("p",[v._v("从Oracle官方透露出来的信息可获知，回收阶段（Evacuation）其实本也有想过设计成与用户程序一起并发执行，但这件事情做起来比较复杂，考虑到G1只是回一部分Region，停顿时间是用户可控制的，所以并不迫切去实现，**而选择把这个特性放到了G1之后出现的低延迟垃圾收集器（即ZGC）中。**另外，还考虑到G1不是仅仅面向低延迟，停顿用户线程能够最大幅度提高垃圾收集效率，为了保证吞吐量所以才选择了完全暂停用户线程的实现方案。")]),v._v(" "),_("p",[_("strong",[v._v("G1 回收器的优化建议")])]),v._v(" "),_("ol",[_("li",[v._v("年轻代大小\n"),_("ul",[_("li",[v._v("避免使用-Xmn或-XX:NewRatio等相关选项显式设置年轻代大小，因为固定年轻代的大小会覆盖可预测的暂停时间目标。我们让G1自己去调整")])])]),v._v(" "),_("li",[v._v("暂停时间目标不要太过严苛\n"),_("ul",[_("li",[v._v("G1 GC的吞吐量目标是90%的应用程序时间和10%的垃圾回收时间")]),v._v(" "),_("li",[v._v("评估G1 GC的吞吐量时，暂停时间目标不要太严苛。目标太过严苛表示你愿意承受更多的垃圾回收开销，而这些会直接影响到吞吐量。")])])])]),v._v(" "),_("h2",{attrs:{id:"垃圾回收器的新发展"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器的新发展"}},[v._v("#")]),v._v(" 垃圾回收器的新发展")]),v._v(" "),_("h3",{attrs:{id:"垃圾回收器的发展过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器的发展过程"}},[v._v("#")]),v._v(" 垃圾回收器的发展过程")]),v._v(" "),_("ol",[_("li",[v._v("GC仍然处于飞速发展之中，目前的默认选项G1 GC在不断的进行改进，很多我们原来认为的缺点，例如串行的Full GC、Card Table扫描的低效等，都已经被大幅改进，例如，JDK10以后，Fu11GC已经是并行运行，在很多场景下，其表现还略优于ParallelGC的并行Ful1GC实现。")]),v._v(" "),_("li",[v._v("即使是SerialGC，虽然比较古老，但是简单的设计和实现未必就是过时的，它本身的开销，不管是GC相关数据结构的开销，还是线程的开销，都是非常小的，所以随着云计算的兴起，在serverless等新的应用场景下，Serial Gc找到了新的舞台。")]),v._v(" "),_("li",[v._v("比较不幸的是CMSGC，因为其算法的理论缺陷等原因，虽然现在还有非常大的用户群体，但在JDK9中已经被标记为废弃，并在JDK14版本中移除")]),v._v(" "),_("li",[v._v("现在G1回收器已成为默认回收器好几年了。我们还看到了引入了两个新的收集器：ZGC（JDK11出现）和Shenandoah（Open JDK12），其特点：主打低停顿时间")])]),v._v(" "),_("h3",{attrs:{id:"shenandoah-gc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#shenandoah-gc"}},[v._v("#")]),v._v(" Shenandoah GC")]),v._v(" "),_("p",[_("strong",[v._v("Open JDK12的Shenandoash GC：低停顿时间的GC（实验性）")])]),v._v(" "),_("ol",[_("li",[v._v("Shenandoah无疑是众多GC中最孤独的一个。是第一款不由Oracle公司团队领导开发的Hotspot垃圾收集器。不可避免的受到官方的排挤。比如号称openJDK和OracleJDK没有区别的Oracle公司仍拒绝在OracleJDK12中支持Shenandoah。")]),v._v(" "),_("li",[v._v("Shenandoah垃圾回收器最初由RedHat进行的一项垃圾收集器研究项目Pauseless GC的实现，旨在针对JVM上的内存回收实现低停顿的需求。在2014年贡献给OpenJDK。")]),v._v(" "),_("li",[v._v("Red Hat研发Shenandoah团队对外宣称，Shenandoah垃圾回收器的暂停时间与堆大小无关，这意味着无论将堆设置为200MB还是200GB，99.9%的目标都可以把垃圾收集的停顿时间限制在十毫秒以内。不过实际使用性能将取决于实际工作堆的大小和工作负载。")])]),v._v(" "),_("p",[v._v("这是RedHat在2016年发表的论文数据，测试内容是使用ES对200GB的维基百科数据进行索引。从结果看：")]),v._v(" "),_("ol",[_("li",[v._v("停顿时间比其他几款收集器确实有了质的飞跃，但也未实现最大停顿时间控制在十毫秒以内的目标。")]),v._v(" "),_("li",[v._v("而吞吐量方面出现了明显的下降，总运行时间是所有测试收集器里最长的。")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/image/00040.png",alt:"img"}})]),v._v(" "),_("p",[v._v("总结")]),v._v(" "),_("ol",[_("li",[v._v("Shenandoah GC的弱项：高运行负担下的吞吐量下降。")]),v._v(" "),_("li",[v._v("Shenandoah GC的强项：低延迟时间。")])]),v._v(" "),_("h3",{attrs:{id:"令人震惊、革命性的-zgc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#令人震惊、革命性的-zgc"}},[v._v("#")]),v._v(" 令人震惊、革命性的 ZGC")]),v._v(" "),_("ol",[_("li",[v._v("官方文档："),_("a",{attrs:{href:"https://docs.oracle.com/en/java/javase/12/gctuning/",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://docs.oracle.com/en/java/javase/12/gctuning/"),_("OutboundLink")],1)]),v._v(" "),_("li",[v._v("ZGC与Shenandoah目标高度相似，在尽可能对吞吐量影响不大的前提下，实现在任意堆内存大小下都可以把垃圾收集的停颇时间限制在十毫秒以内的低延迟。")]),v._v(" "),_("li",[v._v("《深入理解Java虚拟机》一书中这样定义ZGC：ZGC收集器是一款基于Region内存布局的，（暂时）不设分代的，使用了读屏障、染色指针和内存多重映射等技术来实现可并发的标记-压缩算法的，以低延迟为首要目标的一款垃圾收集器。")]),v._v(" "),_("li",[v._v("ZGC的工作过程可以分为4个阶段：并发标记 - 并发预备重分配 - 并发重分配 - 并发重映射 等。")]),v._v(" "),_("li",[v._v("ZGC几乎在所有地方并发执行的，除了初始标记的是STW的。所以停顿时间几乎就耗费在初始标记上，这部分的实际时间是非常少的。")])]),v._v(" "),_("p",[_("strong",[v._v("吞吐量")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/image/00041.png",alt:"img"}})]),v._v(" "),_("p",[v._v("max-JOPS：以低延迟为首要前提下的数据")]),v._v(" "),_("p",[v._v("critical-JOPS：不考虑低延迟下的数据")]),v._v(" "),_("p",[_("strong",[v._v("低延迟")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/image/00042.png",alt:"img"}})]),v._v(" "),_("p",[v._v("在ZGC的强项停顿时间测试上，它毫不留情的将Parallel、G1拉开了两个数量级的差距。无论平均停顿、95%停顿、998停顿、99. 98停顿，还是最大停顿时间，ZGC都能毫不费劲控制在10毫秒以内。")]),v._v(" "),_("p",[v._v("虽然ZGC还在试验状态，没有完成所有特性，但此时性能已经相当亮眼，用“令人震惊、革命性”来形容，不为过。未来将在服务端、大内存、低延迟应用的首选垃圾收集器。")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("JDK14之前，ZGC仅Linux才支持。")])]),v._v(" "),_("li",[_("p",[v._v("尽管许多使用ZGC的用户都使用类Linux的环境，但在Windows和macOS上，人们也需要ZGC进行开发部署和测试。许多桌面应用也可以从ZGC中受益。因此，ZGC特性被移植到了Windows和macOS上。")])]),v._v(" "),_("li",[_("p",[v._v("现在mac或Windows上也能使用ZGC了，示例如下：")]),v._v(" "),_("p",[v._v("-XX:+UnlockExperimentalVMOptions-XX：+UseZGC")])])])])}),[],!1,null,null,null);_.default=t.exports}}]);